; QTERM Version 4.2 Patch Area
; Code as adapted from QTERM.COM from QTERM33A.LBR posted by David Goodenough
;  to BOSKUG RCP/M circa 12/27/88, and QTERM Vers. 4.x patch listing 8-Feb-89.

; D. Presberg dissasembled this with Z8E, 21-Jan-89.  Code labels taken from
;  D. Goodenough "qterm.z" example circa 8-Feb-89.

; This edit is for Kaypro-II and -4 ('83 version without graphics).  Kaypro
;  (and Xerox BB-I) use an SIO chip, port A, with a separate baud rate
;  generator:  status port at 04, data port at 06, baud rate port at 0.
;  15-Feb-89, D. Presberg, BCS/BOSKUG.

; D. Goodenough added break, dtr and mode stuff  2-23-89

; Modified for Xerox 820-II, 16/8. Clears screen at start, at end, and re-
;  sets alternate video at end; all terminal capabilities supported.
;  By Tim Carney 17-Apr-89.

; Modified for the JCW SBC 2003/11/30 by JCW
;  Video sequences are for a TVI925/950
;  Kaypro and Xerox references removed for clarity

.var	sioc	0x01b		; SIO control port
.var	siod	0x01a		; SIO data port
.var	ctcbaud	0x011		; CTC channel for baud rate

.var	yes	0x0ff		; true value
.var	no	0x0		; false value

	.org	0x110		; Get modem input status
modist:	in	a,(sioc)
	and	0x01
	ret

	.org	0x120		; Read modem character
modin:	in	a,(siod)
	ret

	.org	0x130		; Get modem output status
modost:	in	a,(sioc)
	and	0x04
	ret

	.org	0x140		; Write modem character
modout:	out	(siod),a
	ret

	.org	0x150		; Start "break"
sbreak:	ld	a,(setf)
	or	a		; do we have valid data in r3,r4,r5
	ret	z		; no - don't do it
	jp	exmlp		; start break takes a bit extra, see below
	
	.org	0x160		; End "break"
ebreak:	ld	a,(setf)
	or	a
	ret	z		; don't do it unless r3, r4, r5 are valid
	ld	hl,r5
	res	4,(hl)
	jp	sioout

	.org	0x170		; Drop DTR
dtroff:	ld	a,(setf)
	or	a
	ret	z		; don't do it unless r3, r4, r5 are valid
	ld	hl,r5
	res	7,(hl)
	jp	sioout

	.org	0x180		; Raise DTR
dtron:	ld	a,(setf)
	or	a
	ret	z		; don't do it unless r3, r4, r5 are valid
	ld	hl,r5
	set	7,(hl)
	jp	sioout

	.org	0x190		; Set baud (register value in A)
setdb:  push	af
	ld	a,0x007       	; CTC in timer mode, channel 1
        out	(ctcbaud),a
	pop	af
        out	(ctcbaud),a
	ret

; The Baud Rate Table has entries from 38400 baud down to 300 baud.
;   There are 2 bytes per entry.  The second byte determines if the entry is
;   enabled or disabled (ffh=enabled; 00=disabled).  The first byte is passed
;   as the A value to the setbd subroutine.

	.org	0x1a0
baudtb:

b38400:	db	0x01,yes		;  38400 baud
b19200:	db	0x02,yes		;  19200
b9600:	db	0x04,yes		;   9600
b4800:	db	0x08,yes		;   4800
b2400:	db	0x10,yes		;   2400
b1200:	db	0x20,yes		;   1200
b600:	db	0x40,yes		;    600
b300:	db	0x80,yes		;    300 baud

	.org	0x1b0		; Set communication mode
setmod:	ld	(setf),a	; flag we've done a set
	ld	c,a		; save byte in c
	ld	hl,r3		; look at byte for wr3
	res	7,(hl)		; turn off ms bit (Rx # bits / char)
	add	a,a		; move bit from 6 to 7 in a
	and	0x80		; mask off the rest
	or	(hl)		; or in the remainder
	jp	finmod		; have to finish this elsewhere

; Communication Mode Table.  Single byte values for 12 combinations of
;    number-of-bits(7/8), parity(none/even/odd), number-of-stop-bits(1/2).

	.org	0x1c0		; Communication mode table
modetb:

n17:	db	0b10000000	;080h, 7n1
n18:	db	0b11000000	;0c0h, 8n1
n27:	db	0b10001000	;088h, 7n2
n28:	db	0b11001000	;0c8h, 8n2
e17:	db	0b10000011	;083h, 7e1
e18:	db	0b11000011	;0c3h, 8e1
e27:	db	0b10001011	;08bh, 7e2
e28:	db	0b11001011	;0cbh, 8e2
o17:	db	0b10000001	;081h, 7o1
o18:	db	0b11000001	;0c8h, 8o1
o27:	db	0b10001001	;089h, 7o2
o28:	db	0b11001001	;0c9h, 8o2

	.org	0x1cc
smlbuf:	db	no	; set this 'yes' if you run out of ram - this feature
			; is not yet implemented, but in time (i.e. V4.1)
			; it will be. QTERM is a real memory hog - it needs
			; well in excess of 48K TPA. If you have a full blown
			; Z-system with oodles of RSX additions, you may
			; run out of space. By setting this true, you can get
			; QTERM to shrink some buffers and fit itself into
			; about 42K, the price paid is somewhat more
			; frequent disk access when reading and writing files.

	.org	0x1cd
xfersz:	db	8	;number of K to read/write during file xfers
			;Must be 1 / 2 / 4 / 8.  Best left as 8 unless
			;  disk is verrrrry slow.  Drop to smaller value
			;  if too many timeouts occur during "protocol"
			;  file transfers (xmodem or kermit).

	.org	0x1ce	; CPU Speed (Mhz; use 3 for 2.5)
speed:	db	10	; JCW SBC runs at 10!

	.org	0x1cf	; Escape character
escape:	db	0x1b	; 1ch=^\  Control-Backslash

	.org	0x1d0	; Signon message
signon:	db	'(JCW SBC 2003, TVI950)    '
	db	0

	.org	0x1f0	; Clear screen
clrs:	db	0x1b	; TVI950 ESC-* c
	db	'*'
	db	0

.var	scrout	0x109	;(a routine to print to CON: the
			;   character in C)
.var	decout	0x10c	;(a routine to print to CON: a decimal value
			;   in HL.  Is available for VT100 and the like.)

	.org	0x200	; Move cursor to position in HL (Row,Col)
moveto:	push	hl	
	ld	c,0x1b	; lead-in with Esc (the ASCII one; not QTERM's)
	call	scrout
	ld	c,'='	; 2nd lead-in is '='
	call	scrout
	pop	hl
	push	hl
	ld	a,h	; row value (top row is 0.)
	call	poff	; add offset and send it to screen
	pop	hl
	ld	a,l	; col value (leftmost col is 0.)
poff:	add	a,' '	; (adds 20h)
	ld	c,a
	jp	scrout	; (scrout returns from 'moveto's call)

; Terminal Capability Bits.  The eight bits stand for each of the following
;   strings.   They count from 01h=bright to 80h=clear-to-end-of-screen.

.var	b_brit	0b00000001	; 0: bright (1.)	-- NOT mandatory
.var	b_dim	0b00000010	; 1: dim    (2.)	-- NOT mandatory
.var	b_dlln	0b00000100	; 2: delete line (4.)	-- important
.var	b_inln	0b00001000	; 3: insert line (8.)	-- important
.var	b_dlch	0b00010000	; 4: delete character (16.)-- unused by QTERM
.var	b_inch	0b00100000	; 5: insert character (32.)-- NOT mandatory
.var	b_clel	0b01000000	; 6: clear to end-of-line(64.) -- important
.var	b_cles	0b10000000	; 7: clear to end-of-screen(128.)-- important

	.org	0x22f
tcbits:	db	0xff		; capability bits- all functions supported
				; by TVI950

; (Kaypro-II/4, non-graphics version, cannot do in-place insertion or deletion
;   of single characters:  it can only overwrite characters at the current
;   cursor position and move the cursor non-destructively, etc..  It can
;   do in-place insertion and deletion of lines, and its clear-to-end-of-
;   -screen and -line leaves the cursor as-is.  It also has clear-screen-and-
;   -home-the-cursor: see clrs, above.  It, of course, has no graphical screen
;   attributes, such as bright and dim.)

	.org	0x230		; Set bright text
brites:	db	0x1b		; TVI950 ESC-( write protect on and bold
	db	')'
	db	0

	.org	0x238		; Set dim text
dims:	db	0x1b		; TVI950 ESC-) write protect off and dim
	db	'('
	db	0

	.org	0x240		; Delete line
dlstr:	db	0x1b		; TVI950 ESC-R delete line
	db	'R'
	db	0

	.org	0x248		; Insert line
ilstr:	db	0x1b		; TVI950 ESC-E insert line
	db	'E'
	db	0

	.org	0x250		; Delete character
dcstr:	db	0x1b		; TVI950 ESC-W del character string.
	db	'W'	
	db	0

	.org	0x258		; Insert character
icstr:	db	0x1b		; TVI950 ESC-Q ins character string.
	db	'Q'	
	db	0

	.org	0x260		; Clear to end of line
ceol:	db	0x1b		; TVI950 ESC-t clear to EOL w/ NULLS
	db	't'	
	db	0

	.org	0x268		; Clear to end of screen
ceos:	db	0x1b		; TVI950 ESC-y clear to EOS w/ nulls
	db	'y'
	db	0


; Entry and Exit hooks.  These are provided to perform custom initialisation
; on startup and on exit from QTERM.  They are invoked before any use is made
; of the screen or the port hardware.

	.org	0x270		; Entry hook (270h .. 272h)
entry:	ret			; Nothing special for JCW SBC


	.org	0x273		; Exit hook  (273h .. 275h)	
exit:	ret			; Nothing special for JCW SBC


	.org	0x0276		; User hook (276h .. 278h)
user:	ret			; Nothing special for JCW SBC


	.org	0x279		; Keymap hook (279h .. 27bh)
keymap:	ret			; Nothing special for JCW SBC

	
	.org	0x27c		; Inline prompt hook (27ch .. 27eh)
ilprmt:	ret			; Nothing special for JCW SBC


;
; Extra patch area if needed.  280h .. 4ffh

	.org	0x280		; 
patcha: 

exmlp:	ld	a,1		; wait till transmitter is really finished
	out	(siod),a
	in	a,(siod)
	rra
	jr	nc,exmlp	; loop till buffer empty
	ld	hl,r5
	set	4,(hl)		; now go set the break bit.

sioout:	ld	hl,siodat
	ld	bc,6*256+sioc
	otir
	ret

finmod:	ld	(hl),a		; and save it back
	inc	hl
	inc	hl		; point hl at r4
	ld	a,(hl)
	and	0x0f4		; mask out bits we don't want
	ld	b,a		; save in b
	ld	a,c		; get set byte back
	and	0x00b		; get bits out of set byte that we want
	or	b		; or in the other bits
	ld	(hl),a		; and save it back
	inc	hl
	inc	hl		; point hl at r5
	ld	a,c
	and	0x040		; get the bit we want from c
	res	6,(hl)		; clear the bit in r5
	or	(hl)
	ld	(hl),a		; put new composite value back
	jp	sioout		; go send the values

siodat:	db	3
r3:	db	0b11000001	; value for wr3 (0c1h)
	db	4
r4:	db	0b01000100	; value for wr4 (044h)
	db	5
r5:	db	0b11101010	; value for wr5 (0e5h)
setf:	db	0		; flag if we've done a set mode command

